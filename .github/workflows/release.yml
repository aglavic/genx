# This is a basic workflow to help you get started with Actions

name: Build and Release

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    tags: 
      - "*"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      build-items:
        description: 'Items to be build'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - windows
          - linux
          - mac

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-windows:
    runs-on: windows-latest
    if: ${{ (github.event_name != 'workflow_dispatch') || (contains(fromJson('["all", "windows"]'), github.event.inputs.build-items)) }}

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.12
    - name: Install dependencies
      run: |
        C:\Miniconda\condabin\conda.bat env update --file genx\windows_build\conda_build.yml --name base
        C:\Miniconda\condabin\conda.bat init powershell
    - name: Build with pyinstaller
      run: |
        cd genx
        pyinstaller genx.spec
    - name: Download and Install Inno Setup installer
      run: |
        curl -L -o installer.exe http://files.jrsoftware.org/is/6/innosetup-6.1.2.exe
        ./installer.exe /verysilent /allusers /dir=inst
    - name: Build setup file
      run: |
        cd genx\windows_build
        python update_version.py
        iscc genx.iss
    - name: Archive distribution
      uses: actions/upload-artifact@v4
      with:
        name: windows-dist
        path: |
          genx\windows_build\Output\GenX-*_win64_setup.exe

  build-ubuntu-22:
    runs-on: ubuntu-22.04
    if: ${{ (github.event_name != 'workflow_dispatch') || (contains(fromJson('["all", "linux"]'), github.event.inputs.build-items)) }}

    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install python3 python3-matplotlib python3-scipy alien rpm build-essential python3-setuptools python3-pip
        pip3 install orsopy pint
    - name: Build binary package
      run: |
        cd genx
        bash debian_build/make_deb.sh
    - name: Build PyPI package
      run: |
        cd genx
        pip3 install build
        cp setup_client.cfg setup.cfg
        python3 -m build
        cp setup_server.cfg setup.cfg
        python3 -m build
    - name: Move dist folder
      run: |
        mkdir dist
        mkdir dist_server
        mv genx/dist/genx3-*.whl dist/
        cp genx/dist/genx3-*.tar.gz dist/
        mv genx/dist/genx3server-*.whl dist_server/
        cp genx/dist/genx3server-*.tar.gz dist_server/
    - name: Rename distribution files
      run: |
        cd genx
        GENX_VERSION=$(python3 -c "from genx.version import __version__;print(__version__)")
        DEST_PATH=$(ls dist/*.deb | sed -e "s/genx/GenX-$GENX_VERSION/g")
        mv dist/*.deb $DEST_PATH
        mv dist/genx3-*.tar.gz "dist/GenX-$GENX_VERSION.tar.gz"
    - name: Upload to PyPI
      if: github.event_name != 'workflow_dispatch'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}
        skip-existing: true
    - name: Upload server package to PyPI
      if: github.event_name != 'workflow_dispatch'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN_SERVER }}
        packages-dir: dist_server/
        skip-existing: true
    - name: Archive distribution
      uses: actions/upload-artifact@v4
      with:
        name: ubuntu-22-dist
        path: |
          genx/dist/*.deb
          genx/dist/*.tar.gz

  build-ubuntu-24:
    runs-on: ubuntu-24.04
    if: ${{ (github.event_name != 'workflow_dispatch') || (contains(fromJson('["all", "linux"]'), github.event.inputs.build-items)) }}

    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install python3 python3-matplotlib python3-scipy alien rpm build-essential python3-setuptools python3-pip
        pip3 install --break-system-packages orsopy pint
    - name: Build binary package
      run: |
        cd genx
        bash debian_build/make_deb.sh
    - name: Rename distribution files
      run: |
        cd genx
        GENX_VERSION=$(python3 -c "from genx.version import __version__;print(__version__)")
        DEST_PATH=$(ls dist/*.deb | sed -e "s/genx/GenX-$GENX_VERSION/g")
        mv dist/*.deb $DEST_PATH
    - name: Archive distribution
      uses: actions/upload-artifact@v4
      with:
        name: ubuntu-24-dist
        path: |
          genx/dist/*.deb

  build-macos:
    runs-on: macos-13
    if: ${{ (github.event_name != 'workflow_dispatch') || (contains(fromJson('["all", "mac"]'), github.event.inputs.build-items)) }}

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python3 -m pip install bumps orsopy pyinstaller pyinstaller-hooks-contrib pyyaml
        python3 -m pip install "numpy<2" scipy matplotlib
        python3 -m pip install platformdirs h5py pymysql numba requests svgwrite pint docutils
        python3 -m pip install wxpython
        python3 -m pip install vtk
        python3 -m pip list
    - name: Build with pyinstaller
      run: |
        cd genx
        pyinstaller genx_mac.spec
    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        INST_CERTIFICATE_BASE64: ${{ secrets.INST_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        P12_PASSWORD_INST: ${{ secrets.P12_PASSWORD_INST }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # create variables
        CERTIFICATE_BUILD=$RUNNER_TEMP/build_certificate.p12
        CERTIFICATE_INST=$RUNNER_TEMP/install_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.provisionprofile
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_BUILD
        echo -n "$INST_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_INST

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificates to keychain
        security import $CERTIFICATE_BUILD -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security import $CERTIFICATE_INST -P "$P12_PASSWORD_INST" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        # cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    - name: Add library signatures
      run: |
        cd genx
        GENX_VERSION=$(python -c "from genx.version import __version__;print(__version__)")
        cd dist
        # update bundle version
        plutil -replace CFBundleShortVersionString -string "$GENX_VERSION" ./genx.app/Contents/Info.plist
        plutil -replace CFBundleVersion -string "$GENX_VERSION-$(git rev-parse --short "$GITHUB_SHA")" ./genx.app/Contents/Info.plist
        # sign the library
        codesign --deep --force --options=runtime --entitlements ../mac_build/entitlements.plist --sign 3E686E9BA077D29822A983870E2C2CD0BBA3441B --timestamp genx.app
    - name: Package app pkg
      run: |
        cd genx
        GENX_VERSION=$(python -c "from genx.version import __version__;print(__version__)")
        cd dist
        ditto ./genx.app /tmp/genx/Applications/genx.app
        productbuild  --component './genx.app' /Applications --sign 7D17CD031AF9F7302CE6D0C2E0E168D5EA78D8A2 --version "$GENX_VERSION" "GenX3-$GENX_VERSION-Installer.pkg"
    - name: Notarize app
      env:
        NOTARIZATION_USERNAME: ${{ secrets.NOTARIZATION_USERNAME }}
        NOTARIZATION_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
      run: |
        xcrun notarytool submit genx/dist/GenX3*.pkg --apple-id "$NOTARIZATION_USERNAME" --password "$NOTARIZATION_PASSWORD" --team-id 8CX8K63BQM --wait
#    - name: Setup tmate session for debug
#      uses: mxschmitt/action-tmate@v3
    - name: Archive distribution
      uses: actions/upload-artifact@v4
      with:
        name: mac-dist
        path: |
          genx/dist/GenX3*.pkg

  build-macos-m1:
    runs-on: macos-14
    if: ${{ (github.event_name != 'workflow_dispatch') || (contains(fromJson('["all", "mac"]'), github.event.inputs.build-items)) }}

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python3 -m pip install bumps orsopy pyinstaller pyinstaller-hooks-contrib pyyaml
        python3 -m pip install "numpy<2" scipy matplotlib
        python3 -m pip install platformdirs h5py pymysql numba requests svgwrite pint docutils
        python3 -m pip install wxpython
        python3 -m pip install vtk
        python3 -m pip list
    - name: Build with pyinstaller
      run: |
        cd genx
        pyinstaller genx_mac.spec
    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        INST_CERTIFICATE_BASE64: ${{ secrets.INST_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        P12_PASSWORD_INST: ${{ secrets.P12_PASSWORD_INST }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # create variables
        CERTIFICATE_BUILD=$RUNNER_TEMP/build_certificate.p12
        CERTIFICATE_INST=$RUNNER_TEMP/install_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.provisionprofile
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_BUILD
        echo -n "$INST_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_INST

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificates to keychain
        security import $CERTIFICATE_BUILD -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security import $CERTIFICATE_INST -P "$P12_PASSWORD_INST" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        # cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    - name: Add library signatures
      run: |
        cd genx
        GENX_VERSION=$(python -c "from genx.version import __version__;print(__version__)")
        cd dist
        # update bundle version
        plutil -replace CFBundleShortVersionString -string "$GENX_VERSION" ./genx.app/Contents/Info.plist
        plutil -replace CFBundleVersion -string "$GENX_VERSION-$(git rev-parse --short "$GITHUB_SHA")" ./genx.app/Contents/Info.plist
        # sign the library
        codesign --deep --force --options=runtime --entitlements ../mac_build/entitlements.plist --sign 3E686E9BA077D29822A983870E2C2CD0BBA3441B --timestamp genx.app
    - name: Package app pkg
      run: |
        cd genx
        GENX_VERSION=$(python -c "from genx.version import __version__;print(__version__)")
        cd dist
        ditto ./genx.app /tmp/genx/Applications/genx.app
        productbuild  --component './genx.app' /Applications --sign 7D17CD031AF9F7302CE6D0C2E0E168D5EA78D8A2 --version "$GENX_VERSION" "GenX3-$GENX_VERSION-M1-Installer.pkg"
    - name: Notarize app
      env:
        NOTARIZATION_USERNAME: ${{ secrets.NOTARIZATION_USERNAME }}
        NOTARIZATION_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
      run: |
        xcrun notarytool submit genx/dist/GenX3*.pkg --apple-id "$NOTARIZATION_USERNAME" --password "$NOTARIZATION_PASSWORD" --team-id 8CX8K63BQM --wait
    - name: Archive distribution
      uses: actions/upload-artifact@v4
      with:
        name: mac-dist-m1
        path: |
          genx/dist/GenX3*.pkg

  release:
    if: github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [build-ubuntu-24, build-ubuntu-22, build-windows, build-macos, build-macos-m1]
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        name: ubuntu-24-dist
    - uses: actions/download-artifact@v4
      with:
        name: ubuntu-22-dist
    - uses: actions/download-artifact@v4
      with:
        name: windows-dist
    - uses: actions/download-artifact@v4
      with:
        name: mac-dist
    - uses: actions/download-artifact@v4
      with:
        name: mac-dist-m1
    - name: Create release notes
      id: release-notes-prepare
      run: |
        cd genx
        GENX_VERSION=$(python -c "from genx.version import __version__;print(__version__)")
        echo "GENX_VERSION=$GENX_VERSION" >> "$GITHUB_ENV"
        python3 create_release_notes.py
    - uses: ncipollo/release-action@v1
      with:
        artifacts: "GenX*.deb,GenX*.tar.gz,GenX-*_win64_setup.exe,GenX3*.pkg"
        token: ${{ secrets.GITHUB_TOKEN }}
        allowUpdates: true
        bodyFile: genx/release_notes.md
        prerelease: ${{ contains(env.GENX_VERSION, 'a') || contains(env.GENX_VERSION, 'b') }}
  release-sourceforge:
    if: github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-22.04
    needs: [build-ubuntu-24, build-ubuntu-22, build-windows, build-macos, build-macos-m1]

    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        name: ubuntu-24-dist
    - uses: actions/download-artifact@v4
      with:
        name: ubuntu-22-dist
    - uses: actions/download-artifact@v4
      with:
        name: windows-dist
    - uses: actions/download-artifact@v4
      with:
        name: mac-dist
    - uses: actions/download-artifact@v4
      with:
        name: mac-dist-m1
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install python3 sshpass
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}
        if_key_exists: fail # replace / ignore / fail; optional (defaults to fail)
    - name: Upload files
      run: |
        cd genx
        GENX_MVERSION=$(python3 -c "from genx.version import __version__;print(__version__.rsplit('.',1)[0])")
        python3 create_subreadme.py
        cd ..
        DEST="GenX $GENX_MVERSION.x"
        mkdir "$DEST"
        mv genx/README_latest.txt "$DEST/README.txt"
        mv GenX*.deb GenX*.tar.gz GenX-*_win64_setup.exe GenX*.pkg "$DEST"
         rsync --progress -urz "$DEST" ${{secrets.SF_USER}}@frs.sourceforge.net:/home/pfs/project/genx/3.x.y/
